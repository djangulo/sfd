// Code generated for package accounts by go-bindata DO NOT EDIT. (@generated)
// sources:
// accounts/templates/email/en-US/password-reset.html
// accounts/templates/email/en-US/password-reset.txt
// accounts/templates/email/en-US/registration-verify-user.html
// accounts/templates/email/en-US/registration-verify-user.txt
// accounts/templates/email/es-DO/password-reset.html
// accounts/templates/email/es-DO/password-reset.txt
// accounts/templates/email/es-DO/registration-verify-user.html
// accounts/templates/email/es-DO/registration-verify-user.txt
// accounts/templates/email/notify-admin-new-user.txt
package accounts

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _accountsTemplatesEmailEnUsPasswordResetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x5f\x6e\xe3\x36\x13\x7f\xdf\x53\x0c\xb4\xf8\xf0\x75\x17\x96\x25\xdb\x49\x9a\x48\xb2\x81\x05\xda\xa2\x05\xfa\xb0\x48\xb1\xe8\x63\x41\x89\x23\x8b\x30\x4d\xaa\x24\x15\xdb\x6b\x18\xe8\x7b\x4f\xd2\x73\xf4\x26\x3d\x49\x41\x52\x8a\x1c\x3b\xb1\xdd\x14\x45\x51\xc8\x7f\xc4\x21\x87\xc3\xf9\xcd\x6f\x66\x98\x19\x92\x73\x04\x6d\x36\x1c\xa7\xc1\x92\x89\x70\xc5\xa8\xa9\x12\x98\x5c\xdd\xd6\xeb\x14\xda\xd1\x28\x8e\xff\x97\x42\x85\x6c\x5e\x99\x76\x14\x40\x81\x9c\xeb\x9a\x14\x4c\xcc\xa7\x41\xec\xc7\x35\xa1\xb4\x1d\xcf\xde\x00\x64\x26\x97\x74\x63\xdf\xec\xbb\xea\xec\x74\x1b\x4d\xc6\xf5\x3a\x0d\x66\x59\x64\x54\xbf\x86\x70\x36\x17\xd3\xa0\x40\x61\x50\x05\x5e\x6e\x67\xe8\xec\x4d\xfb\x6e\x47\xfb\xc7\x6e\x8d\x86\xb9\x34\x46\x2e\x13\x18\xc7\xf6\xe8\x4b\xb2\xee\x9c\xb9\x89\xbd\xa4\x77\x6f\xec\xd7\x84\x2b\xcc\x17\xcc\x84\xb9\x5c\x87\xba\x22\x54\xae\x12\x18\x8d\xeb\xb5\xff\x99\xdc\xd6\x6b\xb8\xae\xd7\xa0\xe6\x39\xf9\xe2\xee\x6e\xe0\x3f\xf1\xf0\xe6\xfa\x5d\x1a\x2e\xe5\xe7\xd7\xe8\xbd\x42\xe5\x2c\xd4\x90\x4b\x45\x51\x75\xa8\xf7\x28\xf5\xe8\xf7\x32\xf5\x54\x70\x08\xed\x01\xc4\x17\x04\xf9\x58\xf3\xd8\xec\x09\xf3\x4f\x8e\xf1\xfc\x14\x40\x46\xd9\x43\x17\xee\x52\x0a\x13\x96\x64\xc9\xf8\x26\x81\x7b\x99\x4b\x23\xc3\x7b\x9c\x37\x9c\xa8\xc1\xb7\xc8\x1f\xd0\xb0\x82\x0c\x3e\x28\x46\xf8\x40\x13\xa1\x43\x8d\x8a\x95\x69\xc7\x12\x8e\xa5\xe9\x38\xd2\xc9\x94\xe7\xa3\x13\x7a\x2c\x1f\xc9\x64\x2a\x26\x40\x4b\xce\x28\xbc\x2d\x63\xfb\xa4\x50\x48\x2e\x55\xe2\x63\x15\x0f\xdc\x33\xbc\xfd\xf2\x5d\x0a\xee\x68\x9a\x7d\xc6\x43\x03\x46\xd6\x09\x5c\x39\x91\xc1\xb5\x09\x1d\xc9\x13\xf0\x24\x4f\x61\x25\x15\x0d\x73\x85\x64\x91\x80\xfb\x0b\xad\x24\x7d\x16\xde\x7d\x48\x4e\xcd\x03\x64\xd5\x64\xf6\x91\x68\x6d\xf7\x02\x85\x1a\x4d\x16\x55\x93\x33\x3a\xf5\xdf\x84\xf9\x12\x6c\x46\x37\x16\x08\xce\x04\x86\x8f\x35\x65\x78\x9b\x06\xb3\xed\x76\xf8\x49\xa3\x1a\x7e\xbd\x24\x8c\xef\x76\x59\x54\x9f\x44\x20\x3a\x09\xc1\xb9\xe9\xff\x1c\xa5\x46\xb7\xff\x3e\xa5\xea\xd9\x8f\x08\x15\x79\x40\x50\x58\x20\x7b\x40\x0a\x04\x14\xfe\xdc\xa0\x36\x60\xa4\xa7\x19\x6c\x64\xa3\xa0\xee\xa8\x57\x4a\x65\x7d\xd6\x80\x36\xac\x40\x28\x55\xa8\xf5\xf0\x4c\x74\x9d\xb1\x8f\x1c\x89\x46\x78\x60\x9a\x19\x30\x15\x42\x29\x39\x97\x2b\x26\xe6\x96\x3e\x8b\x17\x2c\x5e\xb0\xf5\x61\xf0\x1d\xc2\xe3\xab\x7a\x9d\xee\xe3\xeb\xa2\x77\xd0\x5e\x9c\xcc\xe9\xac\x3c\x77\x73\xc9\x69\xba\x17\x82\xc7\x08\xec\xf5\xce\x93\xb0\xbb\x03\x59\x14\xf9\x34\x10\x52\xd6\x28\x50\x81\x90\x0a\x4b\x54\x0a\x55\x00\x86\xa8\x39\x9a\x69\xf0\x53\xce\x89\x58\x04\x50\x29\x2c\xa7\xc1\x76\x3b\xb4\xd9\x7d\x6f\xfd\xff\x9e\x89\xc5\x6e\x77\xd6\x0a\x40\x96\x37\xc6\x48\x01\x66\x53\xe3\x34\xf0\x83\xa0\x43\xa2\x68\x94\xb6\x2c\xac\x25\xf3\x2e\xe4\xa4\x58\xcc\x95\x6c\x04\x0d\x5b\x82\xbe\xbd\x1b\xd1\x9b\x3c\x7e\xf4\xee\x7a\xff\x62\x70\x63\xf1\x3b\x2e\x82\x9d\x6a\x9c\x8f\xe9\x28\x6f\x17\xb4\xe0\x81\x43\xcf\x27\x48\x02\xf1\xf3\x2d\x79\x62\x3b\x64\xdb\x20\xaf\xba\x26\x39\x1e\x8d\x07\xdd\x77\xf4\x4c\x3f\xbe\x44\xe9\xaf\xae\xbf\x00\x60\x00\x17\x90\x9e\x8b\xe7\x43\x12\xf9\x30\x9c\xa5\x48\x44\xce\x90\xfa\x74\xc1\x03\x9f\x52\xdf\x95\xc0\x0c\xac\x88\x06\x21\x5d\xde\xc0\xaa\x92\xa0\x0d\x51\x06\xa9\xcf\xd3\x36\x9f\x07\x6e\x76\x49\x36\xc0\xe6\x96\x8e\x7b\x49\x7c\x51\xf2\x7e\xa0\x4b\x26\x98\x36\x8a\x18\x26\xc5\x00\x7e\x90\x05\x43\x4a\x28\x7c\xc3\x38\x31\xbf\xff\xc6\x59\x41\xe0\x2b\x69\x17\x15\x44\x90\xb3\x5b\x6e\xb7\xd1\xfb\xc3\x06\xb5\xdf\x50\x3a\x9e\x91\xb1\x7d\x9e\x96\x45\x5b\xa2\xd3\xc0\x3a\x6f\x7d\xa2\x52\xfc\xdf\xc0\x8a\xe9\xca\x57\x10\x57\xc9\x60\x69\x7d\x74\xee\x69\xe0\x6c\xd1\xfa\x2b\x05\x02\x13\xbe\xf8\x34\xa6\x51\xd8\xc3\xf2\x52\x59\x4a\x5e\x99\xce\x9f\x84\x6e\x72\x5d\x28\x96\x63\x97\xd0\x4d\x2f\xb2\xf1\x77\xb8\xc3\xfb\x68\xb7\xfb\x87\xfa\x62\x16\xbd\x74\x0d\xeb\x6f\xe9\x47\xf2\xe7\xef\x7b\x59\xe4\xae\x90\x47\x77\xcb\x63\x13\x87\x5b\x1f\x6d\x79\xb8\x55\xbf\x45\xa7\xfa\xa8\xd2\x2d\xfd\xe3\x97\x5f\xff\x0c\x00\x00\xff\xff\x58\x65\x79\x20\xdd\x0c\x00\x00")

func accountsTemplatesEmailEnUsPasswordResetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_accountsTemplatesEmailEnUsPasswordResetHtml,
		"accounts/templates/email/en-US/password-reset.html",
	)
}

func accountsTemplatesEmailEnUsPasswordResetHtml() (*asset, error) {
	bytes, err := accountsTemplatesEmailEnUsPasswordResetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "accounts/templates/email/en-US/password-reset.html", size: 3293, mode: os.FileMode(420), modTime: time.Unix(1601316737, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _accountsTemplatesEmailEnUsPasswordResetTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x41\x4a\xc4\x40\x10\x45\xf7\x7d\x8a\x8f\xeb\xa1\x0f\xe0\x4e\x50\x41\x70\x31\x28\xe2\xba\x48\xd7\x4c\x8a\xe9\x74\x69\x55\x4d\xc2\x10\x72\x20\xcf\xe1\xc5\x24\x13\x5d\xba\x7e\xf5\x5f\xbd\x3d\xb9\x4f\x6a\x05\xc6\xce\x71\x0b\xcc\x73\x7e\x73\xb6\xfc\x30\x90\xd4\x65\x49\xe9\x9d\xd1\xd3\xc8\x30\xee\x58\x46\x2e\x20\x18\x7f\x9e\xd9\x03\xa1\xdb\x0c\x17\x3d\x1b\x3e\xfe\x54\x07\x35\x44\x2f\x0e\x5e\x1d\xa0\x52\x8c\xdd\x73\xda\x57\x26\x67\x8c\xe2\x12\x88\x9e\x71\xd0\x5a\x75\x92\x76\x44\x95\x76\xfa\x47\x97\x53\x9a\xe7\xbc\x76\xbe\xac\xf0\x59\xda\x69\x59\x6e\x52\x7a\x3a\x40\x02\x13\x39\x9a\x5e\x27\x98\x7a\x85\x07\x59\x70\xd9\xfe\xff\x76\xee\xae\x74\xa0\x0b\xe4\xd8\xd4\x78\x83\x03\xbb\xd3\x91\x73\xba\x2b\x83\x34\xf1\x30\x0a\xd1\xb6\xc3\xab\x76\xc2\x85\x0a\x1e\xa5\x52\x7c\x7f\x55\xe9\x08\xf7\xba\x1e\x75\xd4\x28\xfd\x04\x00\x00\xff\xff\x44\xc1\x95\xd4\x33\x01\x00\x00")

func accountsTemplatesEmailEnUsPasswordResetTxtBytes() ([]byte, error) {
	return bindataRead(
		_accountsTemplatesEmailEnUsPasswordResetTxt,
		"accounts/templates/email/en-US/password-reset.txt",
	)
}

func accountsTemplatesEmailEnUsPasswordResetTxt() (*asset, error) {
	bytes, err := accountsTemplatesEmailEnUsPasswordResetTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "accounts/templates/email/en-US/password-reset.txt", size: 307, mode: os.FileMode(420), modTime: time.Unix(1601316728, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _accountsTemplatesEmailEnUsRegistrationVerifyUserHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\xcf\x6e\xe3\x36\x13\xbf\xef\x53\x0c\xb4\xf8\x80\x6f\x17\x96\x2d\xdb\x49\x9a\x58\xb2\x81\x05\xba\xc5\x1e\x7a\x28\x36\xd8\x5e\x0b\x8a\x1c\xc9\x6c\x28\x52\x1d\x52\x8e\xb3\x86\x81\xde\xfb\x14\x3d\xf6\xbc\x8f\x90\x37\xe9\x93\x14\xd4\x1f\xdb\xb1\x53\xdb\x4d\x51\x14\x85\x92\x48\x1c\x72\x66\x38\xbf\xf9\x71\x86\x49\x1c\x4b\x15\x82\x75\x0f\x0a\xa7\x41\x21\x75\x78\x2f\x85\x9b\x4f\x60\x7c\x71\x5d\x2e\x63\x68\x47\xc3\x28\xfa\x5f\x0c\x73\x94\xf9\xdc\xb5\xa3\x00\x38\x2a\x65\x4b\xc6\xa5\xce\xa7\x41\xd4\x8c\x4b\x26\x44\x3b\x9e\xbd\x02\x48\x5c\x6a\xc4\x83\xff\xf2\xdf\xd4\xf9\xe9\x0c\x8d\x47\xe5\x32\x0e\x66\xc9\xc0\xd1\x76\x0d\x53\x32\xd7\xd3\x80\xa3\x76\x48\x41\x23\xf7\x33\x62\xf6\xaa\xfd\xf6\xa3\xdd\x6d\xb7\x4e\xc3\xd4\x38\x67\x8a\x09\x8c\x22\xbf\xf5\x82\x2d\xbb\x60\xae\xa2\x46\xb2\x0d\x6f\xd4\xac\x09\xef\x31\xbd\x93\x2e\x4c\xcd\x32\xb4\x73\x26\xcc\xfd\x04\x86\xa3\x72\xd9\xfc\x19\x5f\x97\x4b\xb8\x2c\x97\x40\x79\xca\xfe\x7f\x73\xd3\x6b\x7e\xa2\xfe\xd5\xe5\x9b\x38\x2c\xcc\xe7\x97\xe8\xbd\x40\xe5\x24\xd4\x90\x1a\x12\x48\x1d\xea\x5b\x94\xb6\xe8\x6f\x65\xf4\x54\xb0\x0f\xed\x1e\xc4\x67\x24\xf9\x50\xf3\xd0\xed\x11\xf7\x4f\xb6\xf1\xfc\x14\x40\x22\xe4\xa2\x4b\x77\x66\xb4\x0b\x33\x56\x48\xf5\x30\x81\x8f\x26\x35\xce\x84\x1f\x31\xaf\x14\xa3\xde\x07\x54\x0b\x74\x92\xb3\xde\x3b\x92\x4c\xf5\x2c\xd3\x36\xb4\x48\x32\x8b\x3b\x96\x28\xcc\x5c\xc7\x91\x4e\x46\x0d\x1f\x6b\x61\x83\xe5\x86\x4c\x6e\x2e\x35\x58\xa3\xa4\x80\xd7\x59\xe4\x9f\x18\xb8\x51\x86\x26\x4d\xae\xa2\x5e\xfd\xf4\xaf\xbf\x7a\x13\x43\xbd\x35\x2b\x3f\xe3\xbe\x03\x67\xca\x09\x5c\xd4\x22\x87\x4b\x17\xd6\x24\x9f\x40\x43\xf2\x18\xee\x0d\x89\x30\x25\x64\x77\x13\xa8\x5f\xa1\x97\xc4\xcf\xc2\xbb\x0b\xc9\xb1\x79\x80\x64\x3e\x9e\x7d\x67\x08\x32\xb6\x30\x04\xdc\xe8\x4c\x52\x81\xf0\x53\x85\x80\xd6\x21\x70\x43\x84\x06\x14\x42\x89\xe4\x50\x23\xc7\x64\x30\x1f\x9f\x30\x5a\xfe\xcd\x3c\x9c\x03\xde\xf0\xca\x23\xa5\xa4\xc6\x70\x53\x74\xfa\xd7\x71\x30\x5b\xad\xfa\x9f\x2c\x52\xff\x7d\xc1\xa4\x5a\xaf\x93\x41\x79\x14\xa2\xc1\x51\x8c\x4e\x4d\xff\xe7\x38\x37\xbc\xfe\xf7\x39\x57\xce\xde\x5b\xc7\x40\x48\x42\xce\xe5\xe3\x17\x0d\x62\xc3\x34\x54\xc8\x1d\x3d\x7e\xd1\x92\x1b\xc8\x2a\x04\xa9\x73\x42\xcb\x04\x83\x92\x11\x83\x85\x07\x4d\x72\x56\xeb\xf5\x4f\x24\xb7\xf6\xb5\xa5\xf7\x42\x5a\xe9\x10\x50\x81\x95\x79\x25\x7d\x90\x80\x5a\x31\x8e\x8d\xed\x96\xfe\x8c\x8e\xf2\xff\x0c\xa7\xfb\xac\xa8\xa1\x1f\x5d\x94\xcb\x78\x17\xf8\x3a\xad\x7b\x8d\xa9\x96\xd5\x3a\xf7\x0d\xa9\x53\xa3\x44\xbc\x93\x9b\x4d\x6a\x76\xba\xee\xd1\x7c\xd4\x1b\x62\x40\xa8\xa6\x81\x36\xa6\x44\x8d\x04\xda\x10\x66\x48\x84\x14\x80\x63\x94\xa3\x9b\x06\x3f\xa4\x8a\xe9\xbb\x00\xe6\x84\xd9\x34\x58\xad\xfa\xdf\xb7\x50\x3b\x69\xf4\xb7\x52\xdf\xad\xd7\x27\x1d\x01\x24\x69\xe5\x9c\xd1\xe0\x1e\x4a\x9c\x06\xcd\x20\xe8\xc0\xe0\x15\x59\xcf\xd0\xd2\xc8\x26\x8a\x94\xf1\xbb\x9c\x4c\xa5\x45\xd8\x92\xf7\xf5\xcd\x50\x5c\xa5\xd1\x26\xc0\xcb\xdd\x5b\xc5\x95\x87\xf0\xb0\x82\x76\xaa\x51\x3a\x12\xc3\xb4\x5d\xd0\xe2\x07\x35\x80\xcd\xe1\x99\x40\xf4\x7c\x3f\x1f\xfb\xf6\xda\x76\xd7\x8b\xae\xc3\x8e\x86\xa3\x5e\xf7\x3b\x7c\xa6\x99\x9f\xa3\xf4\x57\xd7\x9f\x01\x30\x40\x97\x17\x82\x42\xb6\x04\xed\x9f\xce\xcb\xa0\xc9\xc5\x49\xaa\x0c\xd8\x09\x72\x1f\xaf\x88\xd0\x1c\xba\x5b\x09\x95\x75\x28\x40\x1b\xb0\x08\x73\x4f\xc0\x5c\x5a\x47\x4c\x18\x40\x0d\xab\x55\xff\x56\x3a\xfc\x60\xac\x5b\xaf\x7b\x50\x56\x28\x10\x64\xae\x0d\x31\x6a\x4e\x5e\x81\xda\xb2\x1f\xcf\x39\x6d\xe5\xec\x9d\x28\xa4\xae\xad\xd7\x65\xa1\x07\xb7\x86\x4b\x14\x4c\xc0\x37\x52\x31\xf7\xf8\x9b\x92\x9c\xc1\xd7\xc6\xaf\xe2\x4c\xb3\x93\x36\x57\xab\xc1\xdb\xbd\x2e\xb6\xdb\x75\x3a\xc2\xb1\x91\x7f\x9e\xd6\x4e\x5f\xc7\xe3\xc0\x03\xa0\x0d\x08\xb4\xe8\x43\xe7\x32\x95\x04\xc5\xe3\xaf\xb6\x4d\x98\x7f\x17\xa6\x89\x14\xb5\x2f\x49\x59\xe5\x2a\x32\x35\x14\x29\x36\xa5\xca\x43\xa1\xba\x0a\xb5\x2d\x59\x0f\xa0\x0c\xb0\x9c\x30\x67\x84\x85\xb1\xc0\x40\x57\xe8\xa3\x07\x25\xeb\xc2\x8a\xa0\x4d\x88\x7a\x21\x8d\x9d\xbc\xf0\xf0\x7f\xd2\xb6\x4a\x2d\x27\x99\x62\x77\xf6\x39\xd3\x1c\x15\x23\x68\x67\xca\x1a\x6c\x4f\x18\x8f\xe7\xdb\xc1\x7a\xfd\x0f\xf5\xd9\x64\xf0\x67\xf7\xbe\xed\xbf\x05\x07\xf2\xe7\x2f\x98\xc9\xa0\xbe\xb3\x1e\x5c\x66\x0f\x5d\xec\x9b\x3e\x30\xb9\x6f\x6a\x6b\xa2\x53\xdd\xa8\x74\x4b\x7f\xff\xf9\x97\x3f\x02\x00\x00\xff\xff\x20\x10\xba\x5a\x4e\x0d\x00\x00")

func accountsTemplatesEmailEnUsRegistrationVerifyUserHtmlBytes() ([]byte, error) {
	return bindataRead(
		_accountsTemplatesEmailEnUsRegistrationVerifyUserHtml,
		"accounts/templates/email/en-US/registration-verify-user.html",
	)
}

func accountsTemplatesEmailEnUsRegistrationVerifyUserHtml() (*asset, error) {
	bytes, err := accountsTemplatesEmailEnUsRegistrationVerifyUserHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "accounts/templates/email/en-US/registration-verify-user.html", size: 3406, mode: os.FileMode(420), modTime: time.Unix(1601315102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _accountsTemplatesEmailEnUsRegistrationVerifyUserTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x31\x4e\xc3\x40\x10\x45\xfb\x3d\xc5\x3f\x40\xe4\x03\xd0\x21\x11\x44\x41\x81\x14\x41\x3f\xda\xfd\x36\x03\xeb\xd9\x30\xbb\x4e\x63\xf9\x40\xd4\x39\x42\x2e\x86\xec\x44\xd0\x51\x8e\x34\x4f\xff\xbd\x97\xe2\xe8\xe5\x54\x1c\xb1\x58\xaf\x3e\x12\x5f\x13\xc1\xda\x88\x58\xdc\x59\x90\x89\x23\xbd\xd1\x18\x79\x07\xcc\x73\xf7\x5a\xe9\xdd\x7e\x14\xcd\xcb\x12\xc2\xbe\x36\x41\x52\x67\x8c\x7a\x39\x1b\xd2\x2f\xc9\xcc\xd8\xfc\x72\x36\x8d\x05\xfd\x44\xa8\x0d\xce\x2a\x49\x70\x14\x17\x9c\xe8\xda\x6b\x94\x8d\xeb\xc2\x9f\xcb\x49\xab\x36\x82\x19\x55\x87\x49\x69\xeb\x61\x59\x22\xaf\xe0\xcd\x55\xfc\x5f\xd9\x2e\x84\x79\xee\xde\x6e\x23\x4d\x8b\x3d\xab\x7d\xae\xca\x07\xc5\x54\x1b\x13\xac\xa0\x12\xef\x02\xe7\xa0\xb5\xb9\xa4\x02\xda\xda\x78\xd0\xc6\xa7\x52\xdb\xb2\xec\x70\x9c\x98\x08\x1d\xac\xb8\xf8\x75\x6e\xa4\x55\xf9\x60\x17\xee\xd3\xa8\xb6\xa1\x5b\xc5\x0e\x87\x12\x95\x49\x12\x1e\x35\x4b\xbb\x7c\x67\x8d\x82\x87\xb2\x7e\x45\x31\x09\x3f\x01\x00\x00\xff\xff\xbd\xcd\x8c\x00\x72\x01\x00\x00")

func accountsTemplatesEmailEnUsRegistrationVerifyUserTxtBytes() ([]byte, error) {
	return bindataRead(
		_accountsTemplatesEmailEnUsRegistrationVerifyUserTxt,
		"accounts/templates/email/en-US/registration-verify-user.txt",
	)
}

func accountsTemplatesEmailEnUsRegistrationVerifyUserTxt() (*asset, error) {
	bytes, err := accountsTemplatesEmailEnUsRegistrationVerifyUserTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "accounts/templates/email/en-US/registration-verify-user.txt", size: 370, mode: os.FileMode(420), modTime: time.Unix(1601315102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _accountsTemplatesEmailEsDoPasswordResetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\xcd\x6e\x1b\x37\x10\xbe\xe7\x29\x06\x1b\x14\x68\x02\xad\x7e\x1d\xd7\xd6\x4a\x02\x02\xb4\x45\x0e\x3d\x04\x0e\x72\x2e\x66\xc9\x91\xc4\x9a\x4b\x6e\x87\x5c\x5b\x8e\x20\xa0\xf7\x3e\x45\x8f\x39\x16\x79\x04\xbd\x49\x9f\xa4\xe0\xfe\x58\xb2\xa4\x4a\xaa\x8b\xa2\x28\xd6\xf6\x2e\x87\x1c\x0e\xf9\xcd\xc7\x6f\xe8\x91\xc7\x54\x13\x38\xff\xa0\x69\x1c\x65\xca\xc4\xf7\x4a\xfa\xf9\x10\x06\x17\x57\xf9\x22\x81\xba\xd5\xeb\x76\xbf\x4a\x60\x4e\x6a\x36\xf7\x75\x2b\x02\x41\x5a\xbb\x1c\x85\x32\xb3\x71\xd4\xad\xda\x39\x4a\x59\xb7\x27\x2f\x00\x46\x3e\xb5\xf2\x21\x7c\x85\x6f\x6e\xe2\x34\x13\x0d\xfa\xf9\x22\x89\x26\xa3\x8e\xe7\xcd\x18\xd4\x6a\x66\xc6\x91\x20\xe3\x89\xa3\xca\x1e\x7a\xe4\xe4\x45\xfd\x1d\x5a\xdb\xcb\xae\x83\xc6\xa9\xf5\xde\x66\x43\xe8\x77\xc3\xd2\x33\x5c\x34\x9b\xb9\xec\x56\x96\xcd\xf6\xfa\xd5\x98\xf8\x9e\xd2\x5b\xe5\xe3\xd4\x2e\x62\x37\x47\x69\xef\x87\xd0\xeb\xe7\x8b\xea\xcf\xe0\x2a\x5f\xc0\x9b\x7c\x01\x3c\x4b\xf1\xeb\xeb\xeb\x56\xf5\xd3\x6d\x5f\xbe\x79\x95\xc4\x99\xfd\xf4\x1c\xbf\x67\xb8\x9c\x84\x1a\x52\xcb\x92\xb8\x41\x7d\x83\xd2\x06\xfd\x8d\x8d\x9f\x1a\x76\xa1\xdd\x81\xf8\x8c\x24\xef\x7b\xee\x87\x3d\x12\xfe\xc9\x32\x0e\x77\x01\x8c\xa4\xba\x6b\xd2\x3d\xb5\xc6\xc7\x53\xcc\x94\x7e\x18\xc2\x8d\x4d\xad\xb7\xf1\x0d\xcd\x0a\x8d\xdc\x7a\x47\xfa\x8e\xbc\x12\xd8\x7a\xcb\x0a\x75\xcb\xa1\x71\xb1\x23\x56\xd3\xa4\x61\x89\xa6\xa9\x6f\x38\xd2\xd8\xb8\xe2\x63\x69\xac\xb0\x7c\x24\x93\x9f\x2b\x03\xce\x6a\x25\xe1\xe5\xb4\x1b\x9e\x04\x84\xd5\x96\x87\x55\xae\xba\xad\xf2\x69\x5f\x7d\xf3\x2a\x81\x72\x69\x4e\x7d\xa2\xdd\x00\xde\xe6\x43\xb8\x28\x4d\x9e\x16\x3e\x2e\x49\x3e\x84\x8a\xe4\x09\xdc\x5b\x96\x71\xca\x84\xb7\x43\x28\x5f\x71\xb0\x24\x07\xe1\xdd\x86\xe4\x58\x3f\xc0\x68\x3e\x98\xdc\x90\x32\x4a\x28\x0b\x92\x40\x58\xe3\x19\x1d\xad\x7f\xc7\x51\x67\x3e\x38\xe1\x9c\xff\x43\xbc\xcf\x01\xa9\x77\x19\x10\xd1\xca\x50\xfc\x28\x2e\xed\xab\x24\x9a\x2c\x97\xed\x8f\x8e\xb8\xfd\x5d\x86\x4a\xaf\x56\xa3\x4e\x7e\x14\x8a\xce\x51\x2c\x4e\x75\xff\xef\xb8\xd5\xbb\xfa\xef\xb9\x95\x4f\xde\x51\x66\x1d\x30\x09\x95\x2a\x69\xa1\x30\x58\xee\x45\x28\x5f\xc8\x40\x37\x3e\x4c\x3d\xc8\x91\x11\xc8\xf9\x60\x65\x26\x0b\xa4\x49\x78\x5e\x7f\x31\x4a\xd8\xf6\x89\x54\x97\x91\xdf\x5b\x86\x29\xde\x59\x86\x3b\xe5\x94\x27\x20\x0d\x4e\xcd\x0a\x15\xb6\x0c\x64\x34\x0a\xaa\xc2\x30\xb9\x52\xc7\x04\x31\xb8\x62\x7b\x19\x67\x04\xda\xe5\x45\x09\x7e\xff\x22\x5f\x24\xdb\xd0\x97\x89\xdd\x29\x41\xa5\xad\xf4\xb9\xaf\x68\x9d\x5a\x2d\x93\xad\xec\x3c\x26\x67\xab\xbe\x1e\xcd\x48\xb9\xa0\xb0\x1f\x3d\x8e\x8c\xb5\x39\x19\x62\x30\x96\x69\x4a\xcc\xc4\x11\x78\xe4\x19\xf9\x71\xf4\x63\xaa\xd1\xdc\x46\x30\x67\x9a\x8e\xa3\xe5\xb2\xfd\x1e\x9d\xbb\x21\x47\xfe\x07\x65\x6e\x57\xab\x93\x51\x00\x46\x69\xe1\xbd\x35\xe0\x1f\x72\x1a\x47\x55\x23\x6a\x90\x10\x05\xbb\x40\xd0\xdc\xaa\x6a\x0b\x29\x8a\xdb\x19\xdb\xc2\xc8\xb8\xe6\xee\xcb\xeb\x9e\xbc\x4c\xbb\x8f\xbb\x7b\xb3\x7d\x79\xb8\x0c\xf8\xed\x0b\x65\xe3\xda\x4d\xfb\xb2\x97\xd6\x03\x6a\xf0\xa0\x44\xaf\x3a\x3b\x43\xe8\x1e\x2e\xdb\x83\x50\x45\xeb\x22\x7a\xd1\x14\xd2\x7e\xaf\xdf\x6a\x7e\x7b\x07\x6a\xf6\x39\x4e\x7f\x77\xfc\x19\x00\x03\xdc\x6c\xf1\x72\x9b\x94\xa7\x73\xd3\xa9\xf2\x71\x92\x2b\x1d\x3c\xc1\xee\xe3\xa2\x08\xd5\x49\xfb\xa0\xc0\x58\x98\x23\xb8\xf2\x88\x3b\x4f\x12\x7e\x2e\xd4\xfa\xb3\x81\xfa\x70\x97\x07\x39\x67\x2b\xc8\xd9\x16\xe4\x05\x49\x02\x35\x33\x96\x91\xab\xbe\x8c\x8c\xc3\x9f\xe8\xac\x83\xfd\x56\x66\xca\x28\xe7\x19\x85\x5a\x7f\x31\x2d\xf8\x60\x85\x22\x89\x12\xbe\x57\x1a\xfd\xfa\xb3\x56\x02\xe1\x5b\x1b\x46\x09\x34\x78\x72\xce\xe5\xb2\xf3\x7a\xb7\x94\x6d\x97\x9e\x86\x76\xd8\x0f\xcf\x53\x01\x0d\x62\x9e\x44\x35\x04\x92\x1c\x61\x2d\x76\x0c\xd9\xfa\x37\x57\xab\x57\x78\x67\x35\x0c\x64\x82\x12\x4d\x0b\x5f\x70\x85\x45\x4a\x95\x42\x05\x2c\x74\x23\x4c\x1b\xa5\x7a\x00\x6d\x01\x67\x4c\x33\xe4\x52\x4c\x11\x4c\x41\x61\xfb\xa0\x95\xf3\x18\x94\xd3\xd8\x98\xcc\x9d\xb2\x6e\xf8\xcc\xf3\xff\xd1\xb8\x22\x75\x82\x55\x4a\x8d\x02\x08\x34\x82\x34\x06\x49\x2c\x7b\xf2\x12\xed\x40\x99\x00\x28\xbc\xee\xac\x56\xff\x52\xb5\x1d\x75\xfe\xea\x96\xb7\xf9\x27\x60\xcf\x7e\xf8\x3a\x39\xea\x94\x27\x68\xef\xea\xba\x1f\x62\x77\xea\xbd\x29\x77\xa7\xda\x4c\xd1\xb8\x3e\xba\x34\x43\xff\xf8\xe5\xd7\x3f\x03\x00\x00\xff\xff\x70\x01\x16\xb3\x3c\x0d\x00\x00")

func accountsTemplatesEmailEsDoPasswordResetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_accountsTemplatesEmailEsDoPasswordResetHtml,
		"accounts/templates/email/es-DO/password-reset.html",
	)
}

func accountsTemplatesEmailEsDoPasswordResetHtml() (*asset, error) {
	bytes, err := accountsTemplatesEmailEsDoPasswordResetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "accounts/templates/email/es-DO/password-reset.html", size: 3388, mode: os.FileMode(420), modTime: time.Unix(1601315108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _accountsTemplatesEmailEsDoPasswordResetTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x3f\x4e\xf3\x40\x10\xc5\xfb\x3d\xc5\xe8\xab\x23\x1f\xe0\xeb\x90\x00\x51\x50\x44\x89\x38\xc0\x64\xf7\x11\x06\xd6\x33\x66\x66\x9d\xc6\xf2\x81\x52\xa2\x1c\xc1\x17\x43\x4e\x28\x28\x28\xe7\xcf\xfb\xbd\xdf\x0e\xa2\x92\xc5\xa8\x80\xb2\x69\x73\x0e\x2c\x5f\xfc\x9f\x68\x9a\xba\x97\x80\x77\x0f\x3d\x4b\x9d\xe7\x94\x9e\xd0\x5b\x90\x23\xcb\x41\x8a\xd1\xa8\x4c\x61\x55\xb2\xb4\xb1\xac\x71\xff\x1b\x45\x03\x3b\x13\xa2\xad\x5b\x77\x18\xa1\x22\x37\x5f\x2e\x2a\xd9\xba\xb4\x35\xa7\x57\x3e\x99\xd3\x49\x42\x1a\x08\x95\x42\x8e\xa3\x40\xd7\x41\x2b\x67\xdc\x18\x8e\x68\x7c\xa8\xc8\x70\x8a\xf1\x77\x47\x97\xd2\x34\x75\x5b\x8e\xd8\x21\xd0\x9e\x45\x3f\xe6\xf9\x5f\x4a\x7b\x21\x35\x7a\x63\x8a\xab\x71\x34\x14\xfa\x1c\x65\x39\x2b\xfd\xb8\x5e\xbd\x06\xb7\x8c\xb0\x0d\x0d\x23\x0a\x48\x8e\x6a\xce\x7e\xbb\xf5\xd0\xe0\x77\x74\xe9\xae\xf4\xa2\x12\xcd\x39\xcb\x72\xd1\x0d\xed\x2d\x0b\x0a\x17\x7a\x94\xca\x6d\x39\x57\xc9\x4c\xf7\xb6\x7e\x65\x56\x4e\xdf\x01\x00\x00\xff\xff\x3d\xf2\x8b\x9c\x5b\x01\x00\x00")

func accountsTemplatesEmailEsDoPasswordResetTxtBytes() ([]byte, error) {
	return bindataRead(
		_accountsTemplatesEmailEsDoPasswordResetTxt,
		"accounts/templates/email/es-DO/password-reset.txt",
	)
}

func accountsTemplatesEmailEsDoPasswordResetTxt() (*asset, error) {
	bytes, err := accountsTemplatesEmailEsDoPasswordResetTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "accounts/templates/email/es-DO/password-reset.txt", size: 347, mode: os.FileMode(420), modTime: time.Unix(1601315108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _accountsTemplatesEmailEsDoRegistrationVerifyUserHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\xcf\x6e\xe3\x36\x13\xbf\xef\x53\x0c\xb4\xf8\x80\x6f\x17\x96\x2d\xdb\x49\x9a\x58\xb2\x81\x05\xba\xc5\x1e\x7a\x28\x36\xd8\x5e\x0b\x8a\x1c\xc9\x6c\x28\x52\x1d\x52\x8e\xb3\x86\x81\xde\xfb\x14\x3d\xf6\xbc\x8f\x90\x37\xe9\x93\x14\xd4\x1f\xdb\xb1\x53\xdb\x4d\x51\x14\x85\x92\x48\x1c\x72\x66\x38\xbf\xf9\x71\x86\x49\x1c\x4b\x15\x82\x75\x0f\x0a\xa7\x41\x21\x75\x78\x2f\x85\x9b\x4f\x60\x7c\x71\x5d\x2e\x63\x68\x47\xc3\x28\xfa\x5f\x0c\x73\x94\xf9\xdc\xb5\xa3\x00\x38\x2a\x65\x4b\xc6\xa5\xce\xa7\x41\xd4\x8c\x4b\x26\x44\x3b\x9e\xbd\x02\x48\x5c\x6a\xc4\x83\xff\xf2\xdf\xd4\xf9\xe9\x0c\x8d\x47\xe5\x32\x0e\x66\xc9\xc0\xd1\x76\x0d\x53\x32\xd7\xd3\x80\xa3\x76\x48\x41\x23\xf7\x33\x62\xf6\xaa\xfd\xf6\xa3\xdd\x6d\xb7\x4e\xc3\xd4\x38\x67\x8a\x09\x8c\x22\xbf\xf5\x82\x2d\xbb\x60\xae\xa2\x46\xb2\x0d\x6f\xd4\xac\x09\xef\x31\xbd\x93\x2e\x4c\xcd\x32\xb4\x73\x26\xcc\xfd\x04\x86\xa3\x72\xd9\xfc\x19\x5f\x97\x4b\xb8\x2c\x97\x40\x79\xca\xfe\x7f\x73\xd3\x6b\x7e\xa2\xfe\xd5\xe5\x9b\x38\x2c\xcc\xe7\x97\xe8\xbd\x40\xe5\x24\xd4\x90\x1a\x12\x48\x1d\xea\x5b\x94\xb6\xe8\x6f\x65\xf4\x54\xb0\x0f\xed\x1e\xc4\x67\x24\xf9\x50\xf3\xd0\xed\x11\xf7\x4f\xb6\xf1\xfc\x14\x40\x22\xe4\xa2\x4b\x77\x66\xb4\x0b\x33\x56\x48\xf5\x30\x81\x8f\x26\x35\xce\x84\x1f\x31\xaf\x14\xa3\xde\x07\x54\x0b\x74\x92\xb3\xde\x3b\x92\x4c\xf5\x2c\xd3\x36\xb4\x48\x32\x8b\x3b\x96\x28\xcc\x5c\xc7\x91\x4e\x46\x0d\x1f\x6b\x61\x83\xe5\x86\x4c\x6e\x2e\x35\x58\xa3\xa4\x80\xd7\x59\xe4\x9f\x18\xb8\x51\x86\x26\x4d\xae\xa2\x5e\xfd\xf4\xaf\xbf\x7a\x13\x43\xbd\x35\x2b\x3f\xe3\xbe\x03\x67\xca\x09\x5c\xd4\x22\x87\x4b\x17\xd6\x24\x9f\x40\x43\xf2\x18\xee\x0d\x89\x30\x25\x64\x77\x13\xa8\x5f\xa1\x97\xc4\xcf\xc2\xbb\x0b\xc9\xb1\x79\x80\x64\x3e\x9e\x7d\x67\x08\x32\xb6\x30\x04\xdc\xe8\x4c\x52\x81\xf0\x53\x85\x80\xd6\x21\x70\x43\x84\x06\x14\x42\x89\xe4\x50\x23\xc7\x64\x30\x1f\x9f\x30\x5a\xfe\xcd\x3c\x9c\x03\xde\xf0\xca\x23\xa5\xa4\xc6\x70\x53\x74\xfa\xd7\x71\x30\x5b\xad\xfa\x9f\x2c\x52\xff\x7d\xc1\xa4\x5a\xaf\x93\x41\x79\x14\xa2\xc1\x51\x8c\x4e\x4d\xff\xe7\x38\x37\xbc\xfe\xf7\x39\x57\xce\xde\x5b\xc7\x40\x48\x42\xce\xe5\xe3\x17\x0d\x62\xc3\x34\x54\xc8\x1d\x3d\x7e\xd1\x92\x1b\xc8\x2a\x04\xa9\x73\x42\xcb\x04\x83\x92\x11\x83\x85\x07\x4d\x72\x56\xeb\xf5\x4f\x24\xb7\xf6\xb5\xa5\xf7\x42\x5a\xe9\x10\x50\x81\x95\x79\x25\x7d\x90\x80\x5a\x31\x8e\x8d\xed\x96\xfe\x8c\x8e\xf2\xff\x0c\xa7\xfb\xac\xa8\xa1\x1f\x5d\x94\xcb\x78\x17\xf8\x3a\xad\x7b\x8d\xa9\x96\xd5\x3a\xf7\x0d\xa9\x53\xa3\x44\xbc\x93\x9b\x4d\x6a\x76\xba\xee\xd1\x7c\xd4\x1b\x62\x40\xa8\xa6\x81\x36\xa6\x44\x8d\x04\xda\x10\x66\x48\x84\x14\x80\x63\x94\xa3\x9b\x06\x3f\xa4\x8a\xe9\xbb\x00\xe6\x84\xd9\x34\x58\xad\xfa\xdf\xb7\x50\x3b\x69\xf4\xb7\x52\xdf\xad\xd7\x27\x1d\x01\x24\x69\xe5\x9c\xd1\xe0\x1e\x4a\x9c\x06\xcd\x20\xe8\xc0\xe0\x15\x59\xcf\xd0\xd2\xc8\x26\x8a\x94\xf1\xbb\x9c\x4c\xa5\x45\xd8\x92\xf7\xf5\xcd\x50\x5c\xa5\xd1\x26\xc0\xcb\xdd\x5b\xc5\x95\x87\xf0\xb0\x82\x76\xaa\x51\x3a\x12\xc3\xb4\x5d\xd0\xe2\x07\x35\x80\xcd\xe1\x99\x40\xf4\x7c\x3f\x1f\xfb\xf6\xda\x76\xd7\x8b\xae\xc3\x8e\x86\xa3\x5e\xf7\x3b\x7c\xa6\x99\x9f\xa3\xf4\x57\xd7\x9f\x01\x30\x40\x97\x17\x82\x42\xb6\x04\xed\x9f\xce\xcb\xa0\xc9\xc5\x49\xaa\x0c\xd8\x09\x72\x1f\xaf\x88\xd0\x1c\xba\x5b\x09\x95\x75\x28\x40\x1b\xb0\x08\x73\x4f\xc0\x5c\x5a\x47\x4c\x18\x40\x0d\xab\x55\xff\x56\x3a\xfc\x60\xac\x5b\xaf\x7b\x50\x56\x28\x10\x64\xae\x0d\x31\x6a\x4e\x5e\x81\xda\xb2\x1f\xcf\x39\x6d\xe5\xec\x9d\x28\xa4\xae\xad\xd7\x65\xa1\x07\xb7\x86\x4b\x14\x4c\xc0\x37\x52\x31\xf7\xf8\x9b\x92\x9c\xc1\xd7\xc6\xaf\xe2\x4c\xb3\x93\x36\x57\xab\xc1\xdb\xbd\x2e\xb6\xdb\x75\x3a\xc2\xb1\x91\x7f\x9e\xd6\x4e\x5f\xc7\xe3\xc0\x03\xa0\x0d\x08\xb4\xe8\x43\xe7\x32\x95\x04\xc5\xe3\xaf\xb6\x4d\x98\x7f\x17\xa6\x89\x14\xb5\x2f\x49\x59\xe5\x2a\x32\x35\x14\x29\x36\xa5\xca\x43\xa1\xba\x0a\xb5\x2d\x59\x0f\xa0\x0c\xb0\x9c\x30\x67\x84\x85\xb1\xc0\x40\x57\xe8\xa3\x07\x25\xeb\xc2\x8a\xa0\x4d\x88\x7a\x21\x8d\x9d\xbc\xf0\xf0\x7f\xd2\xb6\x4a\x2d\x27\x99\x62\x77\xf6\x39\xd3\x1c\x15\x23\x68\x67\xca\x1a\x6c\x4f\x18\x8f\xe7\xdb\xc1\x7a\xfd\x0f\xf5\xd9\x64\xf0\x67\xf7\xbe\xed\xbf\x05\x07\xf2\xe7\x2f\x98\xc9\xa0\xbe\xb3\x1e\x5c\x66\x0f\x5d\xec\x9b\x3e\x30\xb9\x6f\x6a\x6b\xa2\x53\xdd\xa8\x74\x4b\x7f\xff\xf9\x97\x3f\x02\x00\x00\xff\xff\x20\x10\xba\x5a\x4e\x0d\x00\x00")

func accountsTemplatesEmailEsDoRegistrationVerifyUserHtmlBytes() ([]byte, error) {
	return bindataRead(
		_accountsTemplatesEmailEsDoRegistrationVerifyUserHtml,
		"accounts/templates/email/es-DO/registration-verify-user.html",
	)
}

func accountsTemplatesEmailEsDoRegistrationVerifyUserHtml() (*asset, error) {
	bytes, err := accountsTemplatesEmailEsDoRegistrationVerifyUserHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "accounts/templates/email/es-DO/registration-verify-user.html", size: 3406, mode: os.FileMode(420), modTime: time.Unix(1601315109, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _accountsTemplatesEmailEsDoRegistrationVerifyUserTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x31\x4e\xc3\x40\x10\x45\xfb\x3d\xc5\x3f\x40\xe4\x03\xd0\x21\x11\x44\x41\x81\x14\x41\x3f\xda\xfd\x36\x03\xeb\xd9\x30\xbb\x4e\x63\xf9\x40\xd4\x39\x42\x2e\x86\xec\x44\xd0\x51\x8e\x34\x4f\xff\xbd\x97\xe2\xe8\xe5\x54\x1c\xb1\x58\xaf\x3e\x12\x5f\x13\xc1\xda\x88\x58\xdc\x59\x90\x89\x23\xbd\xd1\x18\x79\x07\xcc\x73\xf7\x5a\xe9\xdd\x7e\x14\xcd\xcb\x12\xc2\xbe\x36\x41\x52\x67\x8c\x7a\x39\x1b\xd2\x2f\xc9\xcc\xd8\xfc\x72\x36\x8d\x05\xfd\x44\xa8\x0d\xce\x2a\x49\x70\x14\x17\x9c\xe8\xda\x6b\x94\x8d\xeb\xc2\x9f\xcb\x49\xab\x36\x82\x19\x55\x87\x49\x69\xeb\x61\x59\x22\xaf\xe0\xcd\x55\xfc\x5f\xd9\x2e\x84\x79\xee\xde\x6e\x23\x4d\x8b\x3d\xab\x7d\xae\xca\x07\xc5\x54\x1b\x13\xac\xa0\x12\xef\x02\xe7\xa0\xb5\xb9\xa4\x02\xda\xda\x78\xd0\xc6\xa7\x52\xdb\xb2\xec\x70\x9c\x98\x08\x1d\xac\xb8\xf8\x75\x6e\xa4\x55\xf9\x60\x17\xee\xd3\xa8\xb6\xa1\x5b\xc5\x0e\x87\x12\x95\x49\x12\x1e\x35\x4b\xbb\x7c\x67\x8d\x82\x87\xb2\x7e\x45\x31\x09\x3f\x01\x00\x00\xff\xff\xbd\xcd\x8c\x00\x72\x01\x00\x00")

func accountsTemplatesEmailEsDoRegistrationVerifyUserTxtBytes() ([]byte, error) {
	return bindataRead(
		_accountsTemplatesEmailEsDoRegistrationVerifyUserTxt,
		"accounts/templates/email/es-DO/registration-verify-user.txt",
	)
}

func accountsTemplatesEmailEsDoRegistrationVerifyUserTxt() (*asset, error) {
	bytes, err := accountsTemplatesEmailEsDoRegistrationVerifyUserTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "accounts/templates/email/es-DO/registration-verify-user.txt", size: 370, mode: os.FileMode(420), modTime: time.Unix(1601315109, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _accountsTemplatesEmailNotifyAdminNewUserTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xc1\x6a\x1b\x31\x10\x86\xef\x7a\x8a\x9f\x9c\x12\x48\x8c\x1b\x9a\x1e\x72\x33\x8e\x7d\x28\x25\x94\x96\x3c\xc0\x58\x1a\xdb\x43\xb4\x1a\x77\xa4\x75\x30\x66\x1f\xa8\xe7\x3c\x82\x5f\xac\xc8\x6b\x1b\xa7\x24\x14\xaa\xc3\xc2\xc2\xb7\x9a\xf9\xff\x6f\xdd\x24\x17\x69\x28\xe8\x25\x5d\x81\x42\x23\x49\x72\x31\x0a\x6a\x97\x74\x75\xed\xdc\x53\x42\x6a\x79\xad\x68\x73\x4b\x26\x8a\x25\x21\x4b\x50\x18\x2f\x0e\x24\x36\x30\xfe\xd5\x0a\x1b\x23\xb7\xa0\x95\xe9\x8c\xbc\xec\x5e\x13\x56\x64\x04\xaf\xa9\x48\x6a\xc9\x06\xce\x3d\x6a\x33\x33\xc6\xdb\xb3\xdd\x0e\x9e\x32\xdb\x60\xda\xc6\xf8\x48\x0d\x77\x9d\x1b\xab\x19\x2b\x26\x91\x7d\xb1\xdd\x6b\x12\xaf\x67\xe0\xa4\x21\x89\x5d\x77\xbc\x2d\xf0\x69\xbb\x33\xa8\x3e\x52\x7f\xdb\x94\xfd\x92\x2a\x76\x58\xfa\x0d\x37\x36\xa6\xc2\x61\x54\x06\x53\xb5\x86\x0a\x2e\xbe\x52\xc2\x2d\x6e\x87\xc3\x2f\xf8\x74\x77\x3f\xfc\x7c\x3f\xbc\xbb\xe8\x3a\xe7\xa6\xb4\x56\xc3\x5a\xb2\x14\x06\x47\x64\x59\xb4\xc2\xa9\xbe\xa4\x48\x9e\xfb\xb8\x7d\x7e\x43\x10\xbf\x3c\xd5\x56\xdb\xdd\x20\x90\x81\xbc\xe7\xac\x20\x44\xc2\x2a\x52\xa1\x79\x9d\x7a\xef\xdc\x76\x3b\x18\xd5\xfe\xbf\x49\x7a\xae\xd3\xc6\x6a\x41\x28\x36\x75\x80\x1b\x9d\xcc\xf4\xc5\xde\xe0\xa7\x7a\xe1\x40\x01\x53\x89\x54\x76\xbf\xa3\x78\xc2\x83\x56\xcc\x53\x22\xe7\x6e\xea\x71\xee\x81\xeb\xd0\xd3\xe7\x45\xed\xda\xb9\x11\x12\xbf\xa0\xcd\x6c\x58\x52\xc6\x8c\x39\x1d\xba\x61\xe3\x00\x4a\xa1\x57\x6a\x9c\xb1\xd1\xd6\x40\xab\x95\xe9\x9a\x22\x8a\x1e\x7d\x72\xd5\x49\xcd\xdf\x32\xdf\xd5\xb9\x17\xf6\x11\x77\xb4\x79\x14\xf6\x2e\x74\x66\xf3\xc7\xe1\xcf\x2b\xa2\x09\x81\x0a\xff\x9f\xcd\xef\x91\x29\x73\xaf\x13\x65\xc9\x98\x6b\x8c\xfa\x22\x69\x81\x28\xe9\xb9\x26\xed\x53\x33\x32\x49\xe8\xdb\x9a\xab\xed\xd9\xbc\xc9\x85\x9b\x8f\xad\xc5\xcd\xf5\x99\xb3\xfd\xa6\xff\x56\xf6\x27\x00\x00\xff\xff\x26\xdc\xac\x5a\x8c\x03\x00\x00")

func accountsTemplatesEmailNotifyAdminNewUserTxtBytes() ([]byte, error) {
	return bindataRead(
		_accountsTemplatesEmailNotifyAdminNewUserTxt,
		"accounts/templates/email/notify-admin-new-user.txt",
	)
}

func accountsTemplatesEmailNotifyAdminNewUserTxt() (*asset, error) {
	bytes, err := accountsTemplatesEmailNotifyAdminNewUserTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "accounts/templates/email/notify-admin-new-user.txt", size: 908, mode: os.FileMode(420), modTime: time.Unix(1601315350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"accounts/templates/email/en-US/password-reset.html":           accountsTemplatesEmailEnUsPasswordResetHtml,
	"accounts/templates/email/en-US/password-reset.txt":            accountsTemplatesEmailEnUsPasswordResetTxt,
	"accounts/templates/email/en-US/registration-verify-user.html": accountsTemplatesEmailEnUsRegistrationVerifyUserHtml,
	"accounts/templates/email/en-US/registration-verify-user.txt":  accountsTemplatesEmailEnUsRegistrationVerifyUserTxt,
	"accounts/templates/email/es-DO/password-reset.html":           accountsTemplatesEmailEsDoPasswordResetHtml,
	"accounts/templates/email/es-DO/password-reset.txt":            accountsTemplatesEmailEsDoPasswordResetTxt,
	"accounts/templates/email/es-DO/registration-verify-user.html": accountsTemplatesEmailEsDoRegistrationVerifyUserHtml,
	"accounts/templates/email/es-DO/registration-verify-user.txt":  accountsTemplatesEmailEsDoRegistrationVerifyUserTxt,
	"accounts/templates/email/notify-admin-new-user.txt":           accountsTemplatesEmailNotifyAdminNewUserTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"accounts": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"email": &bintree{nil, map[string]*bintree{
				"en-US": &bintree{nil, map[string]*bintree{
					"password-reset.html":           &bintree{accountsTemplatesEmailEnUsPasswordResetHtml, map[string]*bintree{}},
					"password-reset.txt":            &bintree{accountsTemplatesEmailEnUsPasswordResetTxt, map[string]*bintree{}},
					"registration-verify-user.html": &bintree{accountsTemplatesEmailEnUsRegistrationVerifyUserHtml, map[string]*bintree{}},
					"registration-verify-user.txt":  &bintree{accountsTemplatesEmailEnUsRegistrationVerifyUserTxt, map[string]*bintree{}},
				}},
				"es-DO": &bintree{nil, map[string]*bintree{
					"password-reset.html":           &bintree{accountsTemplatesEmailEsDoPasswordResetHtml, map[string]*bintree{}},
					"password-reset.txt":            &bintree{accountsTemplatesEmailEsDoPasswordResetTxt, map[string]*bintree{}},
					"registration-verify-user.html": &bintree{accountsTemplatesEmailEsDoRegistrationVerifyUserHtml, map[string]*bintree{}},
					"registration-verify-user.txt":  &bintree{accountsTemplatesEmailEsDoRegistrationVerifyUserTxt, map[string]*bintree{}},
				}},
				"notify-admin-new-user.txt": &bintree{accountsTemplatesEmailNotifyAdminNewUserTxt, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
